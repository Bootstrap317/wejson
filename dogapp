{
    "english": [
        {
            "id": 0,
            "questionNo": 1,
            "question": "What of the following is used in React.js to increase performance?",
            "options": [
                "Original DOM",
                "Virtual DOM",
                "Both A and B.",
                "None of the above."
            ],
            "correctAnswer": [],
            "isAnswer": false,
            "answer": "Virtual DOM"
        },
        {
            "id": 1,
            "questionNo": 2,
            "question": "React merges the object you provide into the current state using setState().",
            "options": [
                "True",
                "False"
            ],
            "correctAnswer": [],
            "isAnswer": false,
            "answer": "True"
        },
        {
            "id": 2,
            "questionNo": 3,
            "question": "React.js was Initially released in................",
            "options": [
                "May 29,2013",
                "April 29,2013",
                "June 29,2013",
                "May 29,2014"
            ],
            "correctAnswer": [],
            "isAnswer": false,
            "answer": "May 29,2013"
        },
        {
            "id": 3,
            "questionNo": 4,
            "question": " Which of the following is the correct data flow sequence of flux concept?",
            "options": [
                "Dispatcher->Action->Store->View",
                "Action->Dispatcher->View->Store",
                "Action->Dispatcher->Store->View",
                "Action->Store->Dispatcher->View"
            ],
            "correctAnswer": [],
            "isAnswer": false,
            "answer": "Action->Dispatcher->Store->View"
        },
        {
            "id": 4,
            "questionNo": 5,
            "question": "React is used mainly for building ................",
            "options": [
                "Database",
                "User interface",
                "Connectivity",
                "Design platform",
                "code optimazation"
            ],
            "correctAnswer": [],
            "isAnswer": false,
            "answer": [
                "User interface",
                "code optimazation"
            ]
        }
    ],
    "hindi": [
        {
            "id": 0,
            "questionNo": 1,
            "question": "निम्नलिखित में से क्या प्रदर्शन बढ़ाने के लिए React.js में उपयोग किया जाता है?",
            "options": [
                "मूल डोम",
                "वर्चुअल डोम",
                "A और B दोनों।",
                "इनमे से कोई भी नहीं।"
            ],
            "correctAnswer": [],
            "isAnswer": false,
            "answer": "वर्चुअल डोम"
        },
        {
            "id": 1,
            "questionNo": 2,
            "question": "रिएक्ट सेटस्टेट () का उपयोग करके आपके द्वारा प्रदान की जाने वाली वस्तु को वर्तमान स्थिति में मिला देता है।",
            "options": [
                "सत्य",
                "असत्य"
            ],
            "correctAnswer": [],
            "isAnswer": false,
            "answer": "सत्य"
        },
        {
            "id": 2,
            "questionNo": 3,
            "question": "React.js को प्रारंभ में ................ में जारी किया गया था।",
            "options": [
                "मई 29,2013",
                "अप्रैल 29,2013",
                "29 जून,2013",
                "मई 29,2014"
            ],
            "correctAnswer": [],
            "isAnswer": false,
            "answer": "मई 29,2013"
        },
        {
            "id": 3,
            "questionNo": 4,
            "question": "निम्नलिखित में से कौन फ्लक्स अवधारणा का सही डेटा प्रवाह अनुक्रम है?",
            "options": [
                "डिस्पैचर-> एक्शन-> स्टोर-> व्यू",
                "एक्शन-> डिस्पैचर-> व्यू-> स्टोर",
                "एक्शन-> डिस्पैचर-> स्टोर-> व्यू",
                "एक्शन-> स्टोर-> डिस्पैचर-> व्यू"
            ],
            "correctAnswer": [],
            "isAnswer": false,
            "answer": "एक्शन-> डिस्पैचर-> स्टोर-> व्यू"
        },
        {
            "id": 4,
            "questionNo": 5,
            "question": "रिएक्ट मुख्य रूप से निर्माण के लिए प्रयोग किया जाता है ................",
            "options": [
                "डेटाबेस",
                "यूजर इंटरफेस",
                "कनेक्टिविटी",
                "डिजाइन प्लेटफॉर्म",
                "कोड ऑप्टिमाइजेशन"
            ],
            "correctAnswer": [],
            "isAnswer": false,
            "answer": [
                "यूजर इंटरफेस",
                "कोड ऑप्टिमाइजेशन"
            ]
        }
    ]
}

///Question

import {
  Box,
  Button,
  Checkbox,
  FormControlLabel,
  FormGroup,
  Radio,
  RadioGroup,
} from "@mui/material";
import React, { useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { useAppDispatch, useAppSelector } from "../app/hooks";
import { addAnswer, isAnswered } from "../slices/QuizAppSlice";
import FinalScreen from "./FinalScreen";

export const Question = () => {
  const { QuestionList, isQuiz } = useAppSelector((state) => state.quiz);
  const dispatch = useAppDispatch();
  const navigate = useNavigate();
  const { id, language } = useParams();

  const [selectedIndex, setselectedIndex] = useState(0);
  const [showModal, setShowModal] = useState(false);
  const [result, setResult] = useState(false);
  const [correct, setCorrect] = useState(0);

  console.log(selectedIndex);

  const handleListItemClick = (event: any, val: any) => {
    dispatch(isAnswered(val.id));
    dispatch(addAnswer({ id: val.id, value: event.target.value }));
  };

  const multiSelectHandler = (event: any, val: any) => {
    dispatch(isAnswered(val.id));
    const newArray = [...val.answerValue];
    if (event.target.checked && !newArray.includes(event.target.value)) {
      newArray.push(event.target.value);
      dispatch(addAnswer({ id: val.id, value: newArray }));
      console.log(newArray);
    } else {
      const afterRemoveArray = newArray.filter(
        (val) => val !== event.target.value
      );
      dispatch(addAnswer({ id: val.id, value: afterRemoveArray }));
    }
  };

  const pageHandler = (val: any, index: number) => {
    setselectedIndex(index);
    navigate(`/${language}/${index + 1}`);
  };

  const ansArray: any = [];
  const finalScreen = () => {
    setShowModal(true);
    QuestionList.forEach((val: any) => {
      if (val.id !== 4 && val.answerValue.includes(val.answer)) {
        setCorrect((prev) => prev + 1);
      }
    });
    QuestionList[4].answerValue.map((elem: any) => {
      if (QuestionList[4].answer.includes(elem)) {
        ansArray.push(true);
      } else {
        ansArray.push(false);
      }
    });

    if (ansArray.length) {
      if (ansArray.every((val: Boolean) => val === true)) {
        if (QuestionList[4].answer.val === ansArray.val) {
          setResult(true);
        } else {
          setResult(false);
        }
      }
    }
    console.log(correct, ansArray, result);
  };

  return (
    <>
      {isQuiz && (
        <Box>
          {QuestionList.map((val: any, index: number) => {
            return (
              <Button
                style={{
                  margin: "0.8rem",
                  backgroundColor: val.isAnswer ? "red" : "grey",
                }}
                variant="contained"
                onClick={() => pageHandler(val, index)}
                key={index}>
                {val.questionNo}
              </Button>
            );
          })}
          <Box>
            <h3>Question No: {QuestionList[selectedIndex].questionNo}</h3>
            <h2>
              {QuestionList.length && QuestionList[selectedIndex].question}
            </h2>
          </Box>

          {QuestionList[selectedIndex].id !== 4 ? (
            <RadioGroup
              row
              aria-labelledby="answer"
              name="row-radio-buttons-group">
              <Box>
                {QuestionList[selectedIndex].options.map(
                  (item: any, index: any) => {
                    return (
                      <FormControlLabel
                        value={item}
                        control={
                          <Radio
                            checked={
                              QuestionList[selectedIndex].answerValue.includes(
                                item
                              )
                                ? true
                                : false
                            }
                          />
                        }
                        label={item}
                        onChange={(event) =>
                          handleListItemClick(
                            event,
                            QuestionList[selectedIndex]
                          )
                        }
                      />
                    );
                  }
                )}
              </Box>
            </RadioGroup>
          ) : (
            <Box>
              <FormGroup
                onChange={(e: any) =>
                  multiSelectHandler(e, QuestionList[selectedIndex])
                }>
                {QuestionList[selectedIndex].options.map(
                  (item: any, index: any) => {
                    console.log(QuestionList[selectedIndex].answerValue);
                    console.log(item);
                    return (
                      <FormControlLabel
                        value={item}
                        control={
                          <Checkbox
                            checked={
                              QuestionList[selectedIndex].answerValue.includes(
                                item
                              )
                                ? true
                                : false
                            }
                            name="multiplechoice"
                          />
                        }
                        label={item}
                      />
                    );
                  }
                )}
              </FormGroup>
            </Box>
          )}

          <Box>
            {QuestionList[selectedIndex].id === 4 && (
              <>
                <Button
                  variant="contained"
                  color="primary"
                  size="large"
                  style={{ width: 185 }}
                  onClick={finalScreen}>
                  Submit
                </Button>
                <FinalScreen
                  showModal={showModal}
                  onClose={() => setShowModal(false)}
                  correct={result ? correct + 1 : correct}
                  setCorrect={setCorrect}
                />
              </>
            )}
          </Box>
        </Box>
      )}
    </>
  );
};


//final screen
import React, { useState } from "react";
import { Box, Modal } from "@mui/material";
import { useAppSelector } from "../app/hooks";
import { PieChart } from "react-minimal-pie-chart";

const style = {
  position: "absolute",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  width: 400,
  bgcolor: "background.paper",
  boxShadow: 24,
  p: 4,
  display: "flex",
  flexDirection: "column",
  justifyContent: "center",
  alignItem: "center",
};

const FinalScreen = ({ showModal, onClose, correct, setCorrect }: any) => {
  const { QuestionList } = useAppSelector((state) => state.quiz);
  const correctPercentage = (correct / 5) * 100;
  const incorrectPercentage = 100 - correctPercentage;

  return (
    <>
      <Modal
        open={showModal}
        onClose={onClose}
        aria-labelledby="modal-modal-title"
        aria-describedby="modal-modal-description">
        <Box sx={style} style={{ height: 700 }}>
          <h3>Answer</h3>
          {QuestionList.map((item: any) => {
            if (item.id !== 4) {
              if (item.answerValue.includes(item.answer)) {
                return (
                  <p>
                    {item.questionNo}:- {item.answerValue}
                  </p>
                );
              }
            } else {
              console.log(
                item.answer.filter((it: any, index: any) => {
                  console.log(it, "7", item.answerValue[index]);
                  return it === item.answerValue[index];
                })
              );
              if (
                item.answer.every(
                  (it: any, index: any) => it === item.answerValue[index]
                )
              ) {
                return (
                  <p>
                    {item.questionNo}:- {item.answerValue}
                  </p>
                );
              }
            }
          })}
          <PieChart
            animate={true}
            style={{ height: "100px" }}
            data={[
              {
                title: "Correct",
                value: correctPercentage,
                color: "#38bb38",
              },
              {
                title: "Incorrect",
                value: incorrectPercentage,
                color: "#e24646",
              },
            ]}
          />
          <p style={{ color: "green" }}>Correct Answer :{correct}</p>
          <p style={{ color: "red" }}>
            InCorrect Answer : {QuestionList.length - correct}
          </p>
          <p style={{ color: "green" }}>
            Correct Answer Percentage : {correctPercentage}%
          </p>
          <p style={{ color: "red" }}>
            InCorrect Answer Percentage : {incorrectPercentage}%
          </p>
        </Box>
      </Modal>
    </>
  );
};

export default FinalScreen;





